export const SUPPORTED_LANGUAGES = ['ru', 'en', 'es', 'de', 'fr'] as const;
export type LanguageCode = typeof SUPPORTED_LANGUAGES[number];
export type Language = {
  flag: string;
  name: string;
};

export interface Translation {
  header: {
    registerButton: string;
    loginButton: string;
    logoutButton: string;
  };
  common: {
    welcome: string;
    username: string;
    email: string;
    password: string;
    learningLanguage: string;
    nativeLanguage: string;
    tryAgain: string;
    unknow: string;
    back: string;
    create: string;
    highlightText: string;
    removeHihglightText: string;
    write: string;
  };
  validation: {
    usernameRequired: string;
    usernameLength: string;
    emailRequired: string;
    emailInvalid: string;
    passwordRequired: string;
    passwordLength: string;
    chooseLanguage: string;
  }
  registration: {    
    chooseLearningLanguage: string;
    chooseNativeLanguage: string;
    errorLaunchLanguages: string;
    errorOfRegistration: string;
    registrationLabel: string;
    registerButton: string;
    loadingLanguages: string;
  };
  login: {
    errorOfLogin: string;
    labelEnter: string;
    username: string;
    password: string;
    loginButton: string;
    usernameRequired: string;
    usernameLength: string;
    passwordRequired: string;
    passwordLength: string; 
  };
  navbar: {
    main: string;
    profile: string;
    folders: string;
    add: string;
    text: string;
    video: string;
  };
  home: {
    welcomeHeader: string;
    heroSubtitle: string;
    easyRecording: string;
    and: string;
    repeat: string;
    withSRS: string;
    usingApp: string;
    youCanForget: string;
    boring: string;
    notInteresting: string;
    forLearning: string;
    you: string;
    areFree: string;
    choose: string;
    what: string;
    learn: string;
    your: string;
    noMore: string;
    noNeed: string;
    always: string;
    switch: string;
    toTranslator: string;
    andRecord: string;
    nonameWord: string;
    differentrApp: string;
    everything: string;
    allInOne: string;
    onePlace: string;
    learnLanguage: string;
    byWatching: string;
    favoriteBloggers: string;
    andReading: string;
    interestingTexts: string;
    youCan: string;
    easilyExtract: string;
    allFrases: string;
    translateAndSave: string;
    innerTranslater: string;
    andWriteInOneClick: string;
    plusFunctions: string;
    organize: string;
    systemStorage: string;
    asYouLike: string;
    keepCards: string;
    method: string;
    intervalInApp: string;
    allowYou: string;
    incredable: string;
    effectivelyLearn: string;
    foreign: string;
    language: string;
    forgetAbout: string;
    endlessLoop: string;
    repetition: string;
    already: string;
    memorizedWords: string;
    methodDescription: string;
    often: string;
    giveYou: string;
    forgottenWords: string;
    butMemorizeOld: string;
    demonstration: string;  
    inDevelopment: string;
    addingGames: string;
    importFrom: string;
    cardVoicing: string;
    sharingDecks: string;
    withFriends: string;
    supportedLanguages: string;
    languages: Language[];
    startNow: string;
    registerButton: string;
    loginButton: string;
    contactUs: string;
    videoNotSupported: string;
    feature1Alt: string;
    feature2Alt: string;
    feature3Alt: string;
    upcomingAlt: string;
    withOneClick: string;
  };
  profile: {
    errorLoading: string;
    loading: string;
    title: string;
    editButton: string;
    noData: string;
    errorUpdating: string;
    editTitle: string;
    updateSuccess: string;
    passwordPlaceholder: string;
    selectLanguage: string;
    saveButton: string;
    cancelButton: string;
  };
  folders: {
    title: string;
    allFolders: string;
    cardsCount: string;
    nearestReviewAt: string;
    nearestReview: string;
    nearestReviewNow: string;
    noReviews: string;
    addFolder: string;
    createFolder: string;
    editFolder: string;
    folderNamePlaceholder: string;
    confirmDelete: string;
    view: string;
    errorLoading: string;
    errorCreating: string;
    errorEditing: string;
    errorDeleting: string;
    edit: string;
    delete: string;
    previous: string;
    page: string;
    of: string;
    next: string;
    cancel: string;
    create: string;
    change: string;
    confirmDeleteTitle: string;
    confirmDeleteMessage: string;
    text: string;
    textTranslation: string;
    noCardsAvailable: string;
    allCards: string;
    noFolder: string;
    confirmDeleteMessageCard: string;
    folder: string;
    customImageUrl:string;
  };

  cards: {
    invalidImageUrl: string;
    isImage: string;
    fillRequiredFieldsText: string;
    fillRequiredFieldsTextTranslate: string;
    notReviewCards: string;
    easy: string;
    medium: string;
    hard: string;
    showTranslation: string;
    showText: string;
    changeCard: string;
    placeholder: string;
    translationError: string;
    showImage: string;
  },
  textPage: {
    title: string;
    placeholder: string;
    dragAndDropHint: string;
    usageHint: string;
    clearText: string;
    readMode: string;
    editMode: string;
    emptyText: string;
    sentencesOnPage: string;
  },
  apiTranslate: {
    errorTranslate: string;
  },
  apiContext: {
    menuTitle: string;
  },
  apiPictures: {
    customImageUrl: string;
    placeholder: string;
    noValidImageFound: string;
    failedToFetch: string;
    fetchPictures: string;
  },
  video: {
    failedToFetchSubs: string;
    loading: string;
    load: string;
    enterURL: string;
    invalidURL: string;
    subtitles: string;
  }
}